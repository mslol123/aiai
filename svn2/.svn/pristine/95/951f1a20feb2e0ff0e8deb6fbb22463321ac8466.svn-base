package com.jxky.bgxs.controller.zsy;

import com.jxky.bgxs.entity.*;
import com.jxky.bgxs.service.gz.BookDataService;
import com.jxky.bgxs.service.wt.ChapterService;
import com.jxky.bgxs.service.wx.BookMessageService;
import com.jxky.bgxs.service.xc.InfoService;
import com.jxky.bgxs.util.CommonHelper;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.ibatis.annotations.Param;
import org.apache.shiro.SecurityUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;

@Controller
public class ReadBookController {

    @Resource
    private BookMessageService bookMessageService;
    @Resource
    private BookDataService bookDataService;
    @Resource
    private ChapterService chapterService;
    @Resource
    private InfoService infoService;
    @Resource
    private CommonHelper commonHelper;

    /**
     * author:zsy
     * 测试用，通过访问url：localhost：8080/book/detail来跳转到书籍详情用
     * 根据选择的书籍id查询对应的书籍信息到详情页面
     */
    @RequestMapping("/book/detail")
    public String detail(Integer id, Model model){
        BookMessage bookMessage = bookMessageService.findById(id);
        BookData bookData = bookDataService.findByBookId(id);
        List<Chapter> chapterList = chapterService.findChapterByBookId(id);
        Chapter firstChapter = chapterList.get(0);
        Chapter lastChapter = chapterList.get(chapterList.size() - 1);
        model.addAttribute("firstChapter",firstChapter);
        model.addAttribute("lastChapter",lastChapter);
        model.addAttribute("bookMessage",bookMessage);
        model.addAttribute("bookData",bookData);
        return "books/book";
    }

    /**
     * author:zsy
     * 根据bookId查询书籍的章节目录
     */
    @RequestMapping("/book/showChapter")
    public String showChapterByBookId(Integer id,Model model){
        List<Chapter> chapterList = chapterService.findChapterByBookId(id);
        //获取当前最新章节
        Chapter lastChapter = chapterList.get(chapterList.size() - 1);
        //获取当前登录的用户
        User currentUser = (User) SecurityUtils.getSubject().getPrincipal();
        //判断当前登录的用户是否存在最近阅读该书籍
        //判断当前用户是否登录
        if(currentUser!=null){
            //查询当前用户最近一次阅读章节
            Info chapterByUserId = infoService.findLasterChapterByUserId(currentUser.getId());
            //如果当前的用户没有阅读过该书籍，则页面最近一次阅读显示第一章
            if(chapterByUserId == null || chapterByUserId.equals("")){
                chapterByUserId = new Info();
                chapterByUserId.setId(currentUser.getId());
                chapterByUserId.setChapter(chapterList.get(0));
            }
            model.addAttribute("chapterByUserId",chapterByUserId);
        }else{
            Info chapterByUserId=new Info();
            chapterByUserId.setChapter(chapterList.get(0));
            model.addAttribute("chapterByUserId",chapterByUserId);
        }
        BookMessage bookMessage = bookMessageService.findById(id);
        //最近更新的章节显示
        model.addAttribute("lastChapter",lastChapter);
        //书籍信息
        model.addAttribute("bookMessage",bookMessage);
        //章节目录
        model.addAttribute("chapterList",chapterList);
        return "books/showchapter";
    }

    /**
     * author:zsy
     * 根据点击的章节id，然后进行阅读章节
     * @param id 为章节id
     *
     */
    @RequestMapping("/readChapter")
    public String readChapter(@Param("id")Integer id, Model model){
        //根据章节id查询对应的章节信息
        Chapter readChapter = chapterService.findById(id);
        //得到章节的路径
        String chapterPath = readChapter.getChapterPath();
        String[] strings = chapterPath.split("/");
        String path = strings[1];
        String name = strings[0]+"/";
        model.addAttribute("readChapter",readChapter);
        model.addAttribute("path",path);
        model.addAttribute("name",name);
        return "books/chapter";
    }

    @RequestMapping("/readAllChapter")
    public String readAllChapter(@Param("id")Integer id, Model model){
        //根据章节id查询对应的章节信息
        Chapter readChapter = chapterService.findById(id);
        //得到章节的路径
        String chapterPath = readChapter.getChapterPath();
        String[] strings = chapterPath.split("/");
        String path = strings[1];
        String name = strings[0]+"/";
        model.addAttribute("readChapter",readChapter);
        model.addAttribute("path",path);
        model.addAttribute("name",name);
        return "books/totalChapter";
    }

    @RequestMapping("/lastChapter")
    public String lastChapter(@Param("id")Integer id, Model model){
        //根据章节id查询对应的章节信息
        Integer lastId = id-1;
        Chapter readChapter = chapterService.findById(lastId);
        //得到章节的路径
        String chapterPath = readChapter.getChapterPath();
        String[] strings = chapterPath.split("/");
        String path = strings[1];
        String name = strings[0]+"/";
        model.addAttribute("readChapter",readChapter);
        model.addAttribute("path",path);
        model.addAttribute("name",name);
        return "books/chapter";
    }

    @RequestMapping("/nextChapter")
    public String nextChapter(@Param("id")Integer id, Model model){
        //根据章节id查询对应的章节信息
        System.out.println("id========="+id);
        Integer nextId =id+1;
        Chapter readChapter = chapterService.findById(nextId);
        //得到章节的路径
        String chapterPath = readChapter.getChapterPath();
        String[] strings = chapterPath.split("/");
        String path = strings[1];
        String name = strings[0]+"/";
        model.addAttribute("readChapter",readChapter);
        model.addAttribute("path",path);
        model.addAttribute("name",name);
        return "books/chapter";
    }

    @RequestMapping("/read")
    @ResponseBody
    public void read(@Param("imgPath")String imgPath, @Param("name") String name, HttpServletResponse response) {
        String path = "";
        if(name == null || name.equals("")){
            path = imgPath;
        }else {
            path = name+ imgPath;
        }
        OutputStream outputStream = null;
        try {
            FTPClient ftp=new FTPClient();
            //FTP服务器的IP和端口
            ftp.connect("120.79.194.211",21);
            //匿名用户必须使用anonymous登录，密码是邮箱
            boolean login=ftp.login("wx","wx1234");
            System.out.println(login);
            ftp.changeWorkingDirectory("images");
            ftp.setBufferSize(1024);
            ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
            InputStream inputStream = ftp.retrieveFileStream(path);
            outputStream = response.getOutputStream();
            byte[] b = new byte[1024*1024];
            int len = 0;
            while ((len = inputStream.read(b)) > -1) {
                outputStream.write(b, 0, len);
                outputStream.flush();
            }
            inputStream.close();
            ftp.completePendingCommand();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

//    @RequestMapping("/readNext")
//    @ResponseBody
//    public void readNext(@Param("imgPath")String imgPath, @Param("name") String name, HttpServletResponse response) {
//        String path = "";
//        if(name == null || name.equals("")){
//            path = commonHelper.getImageDirectory() + imgPath;
//        }else {
//            path = commonHelper.getImageDirectory() +name+ imgPath;
//        }
//        ServletOutputStream outputStream = null;
//        try {
//            URL url = new URL(path);
//            URLConnection conn = url.openConnection();
//            InputStream inputStream = conn.getInputStream();
//            outputStream = response.getOutputStream();
//            byte[] b = new byte[1024];
//            int len = 0;
//            while ((len = inputStream.read(b)) > -1) {
//                outputStream.write(b, 0, len);
//                outputStream.flush();
//            }
//        } catch (IOException e) {
//            e.printStackTrace();
//        } finally {
//            if (outputStream != null) {
//                try {
//                    outputStream.close();
//                } catch (IOException e) {
//                    e.printStackTrace();
//                }
//            }
//        }
//    }
}
