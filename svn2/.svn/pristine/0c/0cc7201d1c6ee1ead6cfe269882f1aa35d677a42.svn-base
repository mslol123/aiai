package com.jxky.bgxs.controller.zq;

import com.jxky.bgxs.entity.Info;

import com.jxky.bgxs.entity.Account;

import com.jxky.bgxs.entity.LoginResult;
import com.jxky.bgxs.entity.User;
import com.jxky.bgxs.httpApiDemo.IndustrySMS;

import com.jxky.bgxs.service.xc.InfoService;

import com.jxky.bgxs.service.xc.AccountService;

import com.jxky.bgxs.service.zq.UserService;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.UnknownAccountException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;

import javax.annotation.Resource;

@Controller
@RequestMapping("/user")
@SessionAttributes(value = {"account","user","info"})
public class UserController {
    private String safetyResult;
    @Autowired
    private UserService userService;

    @Resource
    private InfoService infoService;

    @Resource
    private AccountService accountService;

    @RequestMapping("/index")
    public String index(){
        return "index";
    }
    @RequestMapping("log")
    public String log(){
        return "/user/login";
    }
    @RequestMapping("preadd")
    public String preadd(){
        return "/user/register";
    }

    //修改密码
    @RequestMapping("amend")
    public String amend(Model model){
        User user = (User)SecurityUtils.getSubject().getPrincipal();
        User user1 = userService.findById(user.getId());
        model.addAttribute("u",user1);
        String tel=user1.getTel().substring(0,3)+"****"+user.getTel().substring(7,user.getTel().length());
        User user2 = new User();
        user2.setTel(tel);
        model.addAttribute("user",user2);
        return "/setting/amend";
    }
    //短信验证接口
    @RequestMapping("dxyz")
    @ResponseBody
    public String dxyz(String phone){
        safetyResult = IndustrySMS.execute(phone);
        return safetyResult;
    }
    //用户注册
    @RequestMapping("save")
    @ResponseBody
    public String save(String nickname,String pwd,String tel){
        User user = new User();
        Info info = new Info();
        user.setNickname(nickname);
        user.setTel(tel);
        user.setPwd(pwd);
        user.setOnlynum(tel);
        userService.save(user);
        User user1 = userService.findByPhone(tel);
        info.setId(user1.getId());
        info.setNickname(nickname);
        infoService.insert(info);
        String only = userService.create();
        Account account = new Account();
        account.setUserId(user1.getId());
        account.setAccountId(only);
        accountService.insert(account);
        return "";
    }
    //判断号码是否注册过
    @RequestMapping("judgephone")
    @ResponseBody
    public String judgephone(String phone){
        User userTel = userService.findByTel(phone);
        if(userTel != null){
            return "此号码已注册过";
        }
        return "000";
    }
    //判断号码是否注册过，用于短信验证登录
    @RequestMapping("judgephone1")
    @ResponseBody
    public Object judgephone1(String phone){
        User user = userService.findByPhone(phone);
        if(user != null){
            return user;
        }
        return "000";
    }
    //注册时判断昵称是否存在
    @RequestMapping("judgeName")
    @ResponseBody
    public String judgeName(String nickname){
        User name = userService.findByName(nickname);
        if(name != null){
            return "此昵称已存在";
        }
        return "000";
    }
    //预修改，跳转页面
    @RequestMapping("preupdate")
    public String preupdate(){
        return "setting/userPass";
    }
    //普通修改密码，用户传过来旧密码，判断旧密码是否正确
    @RequestMapping("findByPwd")
    @ResponseBody
    public String findByPwd(String pwd){
        User user1 = (User)SecurityUtils.getSubject().getPrincipal();
        User user = userService.findByPwd(pwd,user1.getId());
        if(user != null){
            return "000";
        }
        return "123";
    }
    //普通修改密码，根据用户id修改密码，上一步执行成功才能执行这一步
    @RequestMapping("updatepwd")
    @ResponseBody
    public String updatepwd(String pwd){
        try {
            User user = (User)SecurityUtils.getSubject().getPrincipal();
            User user1 = new User();
            user1.setId(user.getId());
            user1.setPwd(pwd);
            userService.update(user1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "000";
    }
    //登录
    @RequestMapping("login")
    @ResponseBody
    public Object login(String tel, String pwd){
        LoginResult loginResult = new LoginResult();
        try {
            userService.login(tel, pwd);
            loginResult.setCode(0);
        }catch (UnknownAccountException u){
            u.printStackTrace();
            loginResult.setCode(001);
            loginResult.setMsg("用户不存在");
        }catch (IncorrectCredentialsException i){
            i.printStackTrace();
            loginResult.setCode(002);
            loginResult.setMsg("密码错误");
        }catch (AuthenticationException a){
            a.printStackTrace();
            loginResult.setCode(003);
            loginResult.setMsg("用户名和密码不能为空");
        }catch (Exception e){
            e.printStackTrace();
            loginResult.setCode(004);
            loginResult.setMsg("未知异常，请联系管理员");
        }
        return loginResult;
    }
    //登录成功后把用户对象传到主页
    @RequestMapping("/loginin")
    public String loginin(Model model) {
        User user = (User)SecurityUtils.getSubject().getPrincipal();
        model.addAttribute("user",user);
        return "index";
    }
    //薛超需要的方法，不用管
    @RequestMapping("book")
    public String book(Model model){
        User user =(User) SecurityUtils.getSubject().getPrincipal();
        Account account = accountService.findByUserId(user.getId());
        Info info = infoService.findById(user.getId());
        model.addAttribute("info",info);
        model.addAttribute("account",account);
        return "bookshelf/favoritesBook";
    }
}
