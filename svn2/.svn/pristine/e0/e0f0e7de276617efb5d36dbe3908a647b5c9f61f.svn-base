package com.jxky.bgxs.controller.zsy;

import com.jxky.bgxs.entity.*;
import com.jxky.bgxs.service.gz.BookDataService;
import com.jxky.bgxs.service.wt.ChapterService;
import com.jxky.bgxs.service.wx.BookMessageService;
import com.jxky.bgxs.service.xc.InfoService;
import org.apache.shiro.SecurityUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.annotation.Resource;
import java.util.List;

@Controller
@RequestMapping("/book")
public class ReadBookController {

    @Resource
    private BookMessageService bookMessageService;
    @Resource
    private BookDataService bookDataService;
    @Resource
    private ChapterService chapterService;
    @Resource
    private InfoService infoService;

    /**
     * author:zsy
     * 测试用，通过访问url：localhost：8080/book/detail来跳转到书籍详情用
     * 根据选择的书籍id查询对应的书籍信息到详情页面
     */
    @RequestMapping("/detail")
    public String detail(Integer id, Model model){
        BookMessage bookMessage = bookMessageService.findById(id);
        BookData bookData = bookDataService.findByBookId(id);
        model.addAttribute("bookMessage",bookMessage);
        model.addAttribute("bookData",bookData);
        return "books/book";
    }

    /**
     * author:zsy
     * 查询书籍的章节目录
     */
    @RequestMapping("/showChapter")
    public String showChapterByBookId(Integer id,Model model){
        List<Chapter> chapterList = chapterService.findChapterByBookId(id);
        //获取当前最新章节
        Chapter lastChapter = chapterList.get(chapterList.size() - 1);
        //获取当前登录的用户对象
        User currentUser = (User) SecurityUtils.getSubject().getPrincipal();
        //判断当前登录的用户是否存在最近阅读该书籍
        //如果当前的用户没有阅读过该书籍，则页面最近一次阅读显示第一章
        Info chapterByUserId = infoService.findLasterChapterByUserId(currentUser.getId());
        if(chapterByUserId == null || chapterByUserId.equals("")){
            chapterByUserId = new Info();
            chapterByUserId.setId(currentUser.getId());
            chapterByUserId.setChapter(chapterList.get(0));
        }
        model.addAttribute("chapterByUserId",chapterByUserId);
        BookMessage bookMessage = bookMessageService.findById(id);
        //最近更新的章节显示
        model.addAttribute("lastChapter",lastChapter);
        model.addAttribute("bookMessage",bookMessage);
        model.addAttribute("chapterList",chapterList);
        return "books/showchapter";
    }

    /**
     * author:zsy
     * 根据点击的章节id，然后进行阅读章节
     */
    @RequestMapping("/readChapter")
    public String readChapter(Integer id,Model model){
        Chapter readChapter = chapterService.findById(id);
        System.out.println(readChapter);
        return "books/chapter.html";
    }
}
