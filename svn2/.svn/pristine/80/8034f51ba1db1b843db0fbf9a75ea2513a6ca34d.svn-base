package com.jxky.bgxs.controller.wt;

import com.jxky.bgxs.entity.Chapter;
import com.jxky.bgxs.service.wt.ChapterService;
import com.jxky.bgxs.service.wx.BookMessageService;
import com.jxky.bgxs.util.TimeHelper;
import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.annotation.Resource;
import java.util.Date;
import java.util.List;

@Controller
@RequestMapping("/bookMessage/list/chapter")
public class ChapterController {
    @Autowired
    private ChapterService chapterService;
    @Autowired
    private BookMessageService bookMessageService;
    @Resource
    private TimeHelper timeHelper;


    @RequestMapping("/index")
    public String findAllChapter(Model model) {
        List<Chapter> chapterList = chapterService.findAllChapter();
        model.addAttribute("chapterList", chapterList);
        return "index";
    }

    @RequestMapping("/preUpdate/{id}")
    public String preUpdate(@PathVariable("id") Integer id, Model model) {
        Chapter chapter = chapterService.findById(id);
        model.addAttribute("chap", chapter);
        return "zhangjie";
    }

    @RequestMapping("/delete/{id}")
    public String delete(@PathVariable("id") Integer id) {
        chapterService.delete(id);
        return "redirect:/bookMessage/draft";
    }


    @RequestMapping("/preInsert/{id}")
    public String preInsert(@PathVariable("id") Integer id, @Param("content") String content, Model model) {
        List<Chapter> chapters = chapterService.findChapterNameByBookId(id, content);
        model.addAttribute("chapters", chapters);
//        quarzToRedis(id);
        return "zhangjie";
    }


    @RequestMapping("/insert")
    public String insert(Chapter chapter, @Param("content") String content, @Param("time") Date date) {
        if (null != date) {
            timeHelper.doTimeRun(date);
        }
        if (0 == chapter.getChapterId()) {
            chapterService.update(chapter);
        }
        chapterService.insert(chapter, content);
        return "";
    }
}
